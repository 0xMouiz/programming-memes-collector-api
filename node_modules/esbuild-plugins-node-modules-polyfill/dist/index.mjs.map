{"version":3,"sources":["../node_modules/tsup/assets/esm_shims.js","../src/lib/utils/util.ts","../src/lib/plugin.ts","../src/lib/polyfill.ts"],"sourcesContent":["// Shim globals in esm bundle\nimport { fileURLToPath } from 'url'\nimport path from 'path'\n\nconst getFilename = () => fileURLToPath(import.meta.url)\nconst getDirname = () => path.dirname(getFilename())\n\nexport const __dirname = /* @__PURE__ */ getDirname()\nexport const __filename = /* @__PURE__ */ getFilename()\n","export const escapeRegex = (str: string) => {\n\treturn str.replace(/[$()*+.?[\\\\\\]^{|}]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n};\n\nexport const commonJsTemplate = ({ importPath }: { importPath: string }) => {\n\treturn `export * from '${importPath}'`;\n};\n\nexport const normalizeNodeBuiltinPath = (path: string) => {\n\treturn path.replace(/^node:/, '').replace(/\\/$/, '');\n};\n","import { builtinModules } from 'node:module';\nimport path from 'node:path';\n\nimport { getCachedPolyfillContent, getCachedPolyfillPath } from './polyfill.js';\nimport { escapeRegex, commonJsTemplate } from './utils/util.js';\n\nimport type { OnResolveArgs, Plugin } from 'esbuild';\nimport type esbuild from 'esbuild';\n\nconst NAME = 'node-modules-polyfills';\n\nexport interface NodePolyfillsOptions {\n\tglobals?: {\n\t\tBuffer?: boolean;\n\t\tprocess?: boolean;\n\t};\n\tname?: string;\n\tnamespace?: string;\n}\n\nconst loader = async (args: esbuild.OnLoadArgs): Promise<esbuild.OnLoadResult> => {\n\ttry {\n\t\tconst isCommonjs = args.namespace.endsWith('commonjs');\n\n\t\tconst resolved = await getCachedPolyfillPath(args.path);\n\t\tconst resolveDir = path.dirname(resolved);\n\n\t\tif (isCommonjs) {\n\t\t\treturn {\n\t\t\t\tloader: 'js',\n\t\t\t\tcontents: commonJsTemplate({\n\t\t\t\t\timportPath: args.path,\n\t\t\t\t}),\n\t\t\t\tresolveDir,\n\t\t\t};\n\t\t}\n\n\t\tconst contents = await getCachedPolyfillContent(args.path);\n\n\t\treturn {\n\t\t\tloader: 'js',\n\t\t\tcontents,\n\t\t\tresolveDir,\n\t\t};\n\t} catch (error) {\n\t\tconsole.error('node-modules-polyfill', error);\n\t\treturn {\n\t\t\tcontents: `export {}`,\n\t\t\tloader: 'js',\n\t\t};\n\t}\n};\n\nexport const nodeModulesPolyfillPlugin = (options: NodePolyfillsOptions = {}): Plugin => {\n\tconst { globals = {}, namespace = NAME, name = NAME } = options;\n\tif (namespace.endsWith('commonjs')) {\n\t\tthrow new Error(`namespace ${namespace} must not end with commonjs`);\n\t}\n\n\tconst commonjsNamespace = `${namespace}-commonjs`;\n\n\treturn {\n\t\tname,\n\t\tsetup: ({ onLoad, onResolve, initialOptions }) => {\n\t\t\t// polyfills contain global keyword, it must be defined\n\t\t\tif (initialOptions.define && !initialOptions.define.global) {\n\t\t\t\tinitialOptions.define.global = 'globalThis';\n\t\t\t} else if (!initialOptions.define) {\n\t\t\t\tinitialOptions.define = { global: 'globalThis' };\n\t\t\t}\n\n\t\t\tinitialOptions.inject = initialOptions.inject ?? [];\n\n\t\t\tif (globals.Buffer) {\n\t\t\t\tinitialOptions.inject.push(path.resolve(__dirname, '../globals/Buffer.js'));\n\t\t\t}\n\n\t\t\tif (globals.process) {\n\t\t\t\tinitialOptions.inject.push(path.resolve(__dirname, '../globals/process.js'));\n\t\t\t}\n\n\t\t\tonLoad({ filter: /.*/, namespace }, loader);\n\t\t\tonLoad({ filter: /.*/, namespace: commonjsNamespace }, loader);\n\t\t\tconst filter = new RegExp(`(?:node:)?${builtinModules.map(escapeRegex).join('|')}`);\n\t\t\tconst resolver = async (args: OnResolveArgs) => {\n\t\t\t\tconst ignoreRequire = args.namespace === commonjsNamespace;\n\n\t\t\t\tconst pollyfill = await getCachedPolyfillPath(args.path).catch(() => null);\n\n\t\t\t\tif (!pollyfill) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst isCommonjs = !ignoreRequire && args.kind === 'require-call';\n\n\t\t\t\treturn {\n\t\t\t\t\tnamespace: isCommonjs ? commonjsNamespace : namespace,\n\t\t\t\t\tpath: args.path,\n\t\t\t\t};\n\t\t\t};\n\n\t\t\tonResolve({ filter }, resolver);\n\t\t},\n\t};\n};\n","/**\n * `polyfillPath` and `getCachedPolyfillContent` are taken from below source with some modifications for my use case.\n * https://github.com/Aslemammad/modern-node-polyfills\n * @author Aslemammad\n * @license MIT\n */\n\nimport { builtinModules } from 'node:module';\nimport { resolve, join } from 'node:path';\n\nimport { build } from 'esbuild';\nimport { loadPackageJSON, resolveModule } from 'local-pkg';\nimport { resolve as resolveExports } from 'resolve.exports';\n\nimport { normalizeNodeBuiltinPath } from './utils/util.js';\n\nasync function polyfillPath(importPath: string) {\n\tif (!builtinModules.includes(importPath))\n\t\tthrow new Error(`Node.js does not have ${importPath} in its builtin modules`);\n\n\tconst jspmPath = resolve(\n\t\trequire.resolve(`@jspm/core/nodelibs/${importPath}`),\n\t\t// ensure \"fs/promises\" is resolved properly\n\t\t'../../..' + (importPath.includes('/') ? '/..' : ''),\n\t);\n\n\tconst jspmPackageJson = await loadPackageJSON(jspmPath);\n\tconst exportPath = resolveExports(jspmPackageJson, `./nodelibs/${importPath}`, {\n\t\tbrowser: true,\n\t});\n\n\tconst exportFullPath = resolveModule(join(jspmPath, exportPath?.[0] ?? ''));\n\n\tif (!exportPath || !exportFullPath) {\n\t\tthrow new Error(\n\t\t\t'resolving failed, please try creating an issue in https://github.com/imranbarbhuiya/esbuild-plugins-node-modules-polyfill',\n\t\t);\n\t}\n\n\treturn exportFullPath;\n}\n\nconst polyfillPathCache: Map<string, Promise<string>> = new Map();\nexport const getCachedPolyfillPath = (importPath: string): Promise<string> => {\n\tconst normalizedImportPath = normalizeNodeBuiltinPath(importPath);\n\n\tconst cachedPromise = polyfillPathCache.get(normalizedImportPath);\n\tif (cachedPromise) {\n\t\treturn cachedPromise;\n\t}\n\n\tconst promise = polyfillPath(normalizedImportPath);\n\tpolyfillPathCache.set(normalizedImportPath, promise);\n\treturn promise;\n};\n\nexport const polyfillContentAndTransform = async (importPath: string) => {\n\tconst exportFullPath = await getCachedPolyfillPath(importPath);\n\n\tconst content = (\n\t\tawait build({\n\t\t\twrite: false,\n\t\t\tformat: 'esm',\n\t\t\tbundle: true,\n\t\t\tentryPoints: [exportFullPath],\n\t\t})\n\t).outputFiles[0]!.text;\n\n\treturn content.replace(/eval\\(/g, '(0,eval)(');\n};\n\nconst polyfillContentCache: Map<string, Promise<string>> = new Map();\nexport const getCachedPolyfillContent = (_importPath: string): Promise<string> => {\n\tconst normalizedImportPath = normalizeNodeBuiltinPath(_importPath);\n\n\tconst cachedPromise = polyfillContentCache.get(normalizedImportPath);\n\tif (cachedPromise) {\n\t\treturn cachedPromise;\n\t}\n\n\tconst promise = polyfillContentAndTransform(normalizedImportPath);\n\tpolyfillContentCache.set(normalizedImportPath, promise);\n\treturn promise;\n};\n"],"mappings":"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","names":["path","builtinModules","path","path","builtinModules"]}